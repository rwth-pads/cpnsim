{
  "petriNets": [
    {
      "id": "ID6",
      "name": "Petri Net",
      "places": [
        {
          "id": "a",
          "name": "start",
          "colorSet": "INT",
          "initialMarking": "[10,10,5,10,10,10,10]",
          "marking": "",
          "position": {
            "x": -200,
            "y": 0
          },
          "size": {
            "width": 30,
            "height": 30
          }
        },
        {
          "id": "c",
          "name": "end place",
          "colorSet": "INT",
          "initialMarking": "",
          "marking": "",
          "position": {
            "x": 0,
            "y": 200
          },
          "size": {
            "width": 50,
            "height": 30
          }
        }
      ],
      "transitions": [
        {
          "id": "b",
          "name": "transition",
          "guard": "",
          "time": "",
          "priority": "",
          "position": {
            "x": -100,
            "y": 100
          },
          "size": {
            "width": 50,
            "height": 30
          }
        }
      ],
      "arcs": [
        {
          "id": "a->b",
          "source": "a",
          "target": "b",
          "inscription": "var1"
        },
        {
          "id": "b->c",
          "source": "b",
          "target": "c",
          "inscription": "var1"
        }
      ]
    }
  ],
  "colorSets": [
    {
      "id": "1bee6f5d-a85a-46d5-be15-d6e043249552",
      "name": "UNIT",
      "type": "basic",
      "definition": "colset UNIT = unit;",
      "color": "#3b82f6"
    },
    {
      "id": "6f5b8a4b-83b7-4747-b923-68f563f80294",
      "name": "BOOL",
      "type": "basic",
      "definition": "colset BOOL = bool;",
      "color": "#10b981"
    },
    {
      "id": "f8579b94-82f5-4838-aaca-a73f3ea515e8",
      "name": "INT",
      "type": "basic",
      "definition": "colset INT = int;",
      "color": "#3b82f6"
    },
    {
      "id": "ced950f1-6214-445f-917f-63333e2c55c4",
      "name": "INTINF",
      "type": "basic",
      "definition": "colset INTINF = intinf;",
      "color": "#3b82f6"
    },
    {
      "id": "b639fb1e-04c6-41f9-a2a9-531f5d27e75a",
      "name": "TIME",
      "type": "basic",
      "definition": "colset TIME = time;",
      "color": "#8b5cf6"
    },
    {
      "id": "acb02014-2486-4b41-b398-4f10452f13a9",
      "name": "REAL",
      "type": "basic",
      "definition": "colset REAL = real;",
      "color": "#ef4444"
    },
    {
      "id": "abccce2f-b403-42fb-ae1b-0e5232070041",
      "name": "STRING",
      "type": "basic",
      "definition": "colset STRING = string;",
      "color": "#f59e0b"
    }
  ],
  "variables": [
    {
      "id": "11c79dea-976d-4f0b-8ec0-26daab4d16c3",
      "name": "var1",
      "colorSet": "INT"
    }
  ],
  "priorities": [
    {
      "id": "00acf2ee-4ea1-4d49-989b-b03af4252b8f",
      "name": "P_HIGH",
      "level": 100
    },
    {
      "id": "49b7be56-9260-4c9c-8e31-4d68da56fd95",
      "name": "P_NORMAL",
      "level": 1000
    },
    {
      "id": "943b3dec-6749-41c9-bfc1-27db8996cf01",
      "name": "P_LOW",
      "level": 10000
    }
  ],
  "functions": [
    {
      "id": "8196209c-c978-4447-9800-01944306a07b",
      "name": "gen",
      "patterns": [
        {
          "id": "e360f501-668e-435d-ad8a-83ecb94cee06",
          "pattern": "(x,y)",
          "expression": "if x>y then [] else [x]^^gen(x+1,y);"
        }
      ]
    }
  ],
  "uses": [
    {
      "name": "procmin-logging.sml",
      "content": "(* TIME unit is seconds*)\r\nval minute = 60.0;\r\nval hour = 60.0*minute;\r\nval day = 24.0*hour;\r\nval week = 7.0*day;\r\n\r\nfun Mtime() = ModelTime.time():time;\r\n\r\nfun monday_jan_5_2015() = 16440.0*day - 1.0*hour;\r\n\r\nfun monday_may_20_2019() = 18036.0*day - 1.0*hour;\r\n\r\nfun start_time() = monday_may_20_2019();\r\n\r\nfun print_start_time() = Date.fmt \"%Y-%m-%d %H:%M:%S\" (Date.fromTimeLocal(Time.fromReal(start_time())));\r\n\r\n(* TIME OUTPUT mySQL*)\r\nfun t2s(t) = Date.fmt \"%Y-%m-%d %H:%M:%S\" (Date.fromTimeLocal(Time.fromReal(t+start_time())));\r\n\r\n(* TIME OUTPUT KEYVALUE*)\r\nfun t2s_alt(t) = Date.fmt \"%d-%m-%Y %H:%M:%S\" (Date.fromTimeLocal(Time.fromReal(t+start_time())));\r\n\r\n(* BETA DISTRIBUTION *)\r\nfun ran_beta(low:real,high:real,a:real,b:real) = low + ((high-low)*beta(a,b)):real; \r\n\r\nfun mean_beta(low:real,high:real,a:real,b:real) = low + ((high-low)* (a/(a+b)));\r\n\r\nfun mode_beta(low:real,high:real,a:real,b:real) = low + ((high-low)*((a-1.0)/(a+b-2.0)));\r\n\r\nfun var_beta(low:real,high:real,a:real,b:real) = ((high-low)*(high-low)* ((a*b)/((a+b)*(a+b)*(a+b+1.0))));\r\n\r\nfun stdev_beta(low:real,high:real,a:real,b:real) = Math.sqrt(var_beta(low,high,a,b));\r\n\r\n\r\n\r\n(* TIME FUNCTIONS *)\r\n\r\nfun t2date(t) = Date.fromTimeLocal(Time.fromReal(t+start_time()));\r\n\r\n\r\nfun t2year(t) = Date.year(t2date(t)):int;\r\nfun t2month(t) = Date.month(t2date(t)):Date.month;\r\nfun t2day(t) = Date.day(t2date(t)):int;\r\nfun t2hour(t) = Date.hour(t2date(t)):int;\r\nfun t2minute(t) = Date.minute(t2date(t)):int;\r\nfun t2second(t) = Date.second(t2date(t)):int;\r\nfun t2weekday(t) = Date.weekDay(t2date(t)):Date.weekday;\r\n\r\nfun t2monthstr(t) = Date.fmt \"%b\" (Date.fromTimeLocal(Time.fromReal(t+start_time())));\r\nfun t2weekdaystr(t) = Date.fmt \"%a\" (Date.fromTimeLocal(Time.fromReal(t+start_time())));\r\n\r\nfun remaining_time_hour(t) = hour - ((fromInt(t2minute(t))*minute) + fromInt(t2second(t)));\r\n\r\n\r\n(* ARRIVAL TIME DISTRIBUTIONS *)\r\n\r\n(* arrival time intensities vary from 0.0 to 1.0 and are the product of three factors: yearly influences, weekly influences, and daily influences *)\r\n\r\nfun at_month_intensity(m:string) =\r\ncase m of \r\n \"Jan\" => 1.0\r\n|\"Feb\" => 1.0\r\n|\"Mar\" => 1.0\r\n|\"Apr\" => 0.3\r\n|\"May\" => 1.0\r\n|\"Jun\" => 1.0\r\n|\"Jul\" => 1.0\r\n|\"Aug\" => 1.0\r\n|\"Sep\" => 1.0\r\n|\"Oct\" => 1.0 \r\n|\"Nov\" => 1.0\r\n|\"Dec\" => 1.0\r\n| _ => 1.0;\r\n\r\nfun at_weekday_intensity(d:string) =\r\ncase d of \r\n \"Mon\" => 1.0\r\n|\"Tue\" => 1.0\r\n|\"Wed\" => 1.0\r\n|\"Thu\" => 1.0\r\n|\"Fri\" => 1.0\r\n|\"Sat\" => 0.1\r\n|\"Sun\" => 0.1\r\n| _ => 1.0;\r\n\r\nfun at_hour_intensity(h:int) =\r\ncase h of \r\n 0 => 0.1\r\n|1 => 0.1\r\n|2 => 0.1\r\n|3 => 0.1\r\n|4 => 0.1\r\n|5 => 0.1\r\n|6 => 0.1\r\n|7 => 0.1\r\n|8 => 0.5\r\n|9 => 1.0\r\n|10 => 1.0\r\n|11 => 1.0\r\n|12 => 1.0\r\n|13 => 1.0\r\n|14 => 1.0\r\n|15 => 1.0\r\n|16 => 1.0\r\n|17 => 1.0\r\n|18 => 1.0\r\n|19 => 0.5\r\n|20 => 0.5\r\n|21 => 0.5\r\n|22 => 0.5\r\n|23 => 0.1\r\n| _ => 1.0;\r\n \r\n(* overall intensity *)\r\nfun at_intensity(t) = at_month_intensity(t2monthstr(t))*at_weekday_intensity(t2weekdaystr(t))*\r\nat_hour_intensity(t2hour(t));\r\n\r\n(* Use this function to sample interarrival times: t is the current time and d is the net delay: It moves forward based on intensities: the lower the intensity, the longer the delay in absolute time.*) \r\nfun rel_at_delay(t,d) = \r\nif d < 0.0001\r\n   then 0.0\r\n   else if d < remaining_time_hour(t)*at_intensity(t)\r\n        then d/at_intensity(t)\r\n        else rel_at_delay(t+remaining_time_hour(t),\r\n            d-(remaining_time_hour(t)*at_intensity(t)))+hour; \r\n\r\n(* same but now without indicating current time explicitly *)\r\nfun r_at_delay(d) = rel_at_delay(Mtime(),d);\r\n\r\n(* the average ratio between effective/net time (parameter d) and delay in actual time*)\r\nval eff_at_factor = r_at_delay(52.0*week)/(52.0*week);\r\n\r\n(* normalized interarrival time delay using the ratio above *)\r\nfun norm_rel_at_delay(t,d) = rel_at_delay(t,d/eff_at_factor) ;\r\n\r\n\r\n(* normalized  interarrival time delay using the ratio above *)\r\nfun norm_r_at_delay(d) = r_at_delay(d/eff_at_factor) ;\r\n\r\n(* SERVICE TIME DISTRIBUTIONS *)\r\n\r\n(* service time intensities vary from 0.0 to 1.0 and are the product of three factors: yearly influences, weekly influences, and daily influences *)\r\n\r\nfun st_month_intensity(m:string) =\r\ncase m of \r\n \"Jan\" => 1.0\r\n|\"Feb\" => 1.0\r\n|\"Mar\" => 1.0\r\n|\"Apr\" => 1.0\r\n|\"May\" => 1.0\r\n|\"Jun\" => 1.0\r\n|\"Jul\" => 0.7\r\n|\"Aug\" => 0.5\r\n|\"Sep\" => 1.0\r\n|\"Oct\" => 1.0 \r\n|\"Nov\" => 1.0\r\n|\"Dec\" => 1.0\r\n| _ => 1.0;\r\n\r\nfun st_weekday_intensity(d:string) =\r\ncase d of \r\n \"Mon\" => 0.9\r\n|\"Tue\" => 1.0\r\n|\"Wed\" => 1.0\r\n|\"Thu\" => 1.0\r\n|\"Fri\" => 0.9\r\n|\"Sat\" => 0.0\r\n|\"Sun\" => 0.0\r\n| _ => 1.0;\r\n\r\nfun st_hour_intensity(h:int) =\r\ncase h of \r\n 0 => 0.0\r\n|1 => 0.0\r\n|2 => 0.0\r\n|3 => 0.0\r\n|4 => 0.0\r\n|5 => 0.0\r\n|6 => 0.0\r\n|7 => 0.0\r\n|8 => 0.5\r\n|9 => 1.0\r\n|10 => 1.0\r\n|11 => 1.0\r\n|12 => 0.5\r\n|13 => 0.5\r\n|14 => 1.0\r\n|15 => 1.0\r\n|16 => 1.0\r\n|17 => 0.5\r\n|18 => 0.3\r\n|19 => 0.1\r\n|20 => 0.1\r\n|21 => 0.1\r\n|22 => 0.0\r\n|23 => 0.0\r\n| _ => 1.0;\r\n \r\n\r\nfun st_intensity(t) = st_month_intensity(t2monthstr(t))*\r\nst_weekday_intensity(t2weekdaystr(t))*\r\nst_hour_intensity(t2hour(t));\r\n\r\n\r\n(* Use this function to sample service times: t is the current time and d is the net delay: It moves forward based on intensities: the lower the intensity, the longer the delay in absolute time.*)\r\nfun rel_st_delay(t,d) = \r\nif d < 0.0001\r\n   then 0.0\r\n   else if d < remaining_time_hour(t)*st_intensity(t)\r\n        then d/st_intensity(t)\r\n        else rel_st_delay(t+remaining_time_hour(t),\r\n            d-(remaining_time_hour(t)*st_intensity(t)))+hour;\r\n\r\n(* same but now without indicating current time explicitly *)\r\nfun r_st_delay(d) = rel_st_delay(Mtime(),d);\r\n\r\n\r\n(* the average ratio between effective/net time (parameter d) and delay in actual time*)\r\nval eff_st_factor = r_st_delay(52.0*week)/(52.0*week);\r\n\r\n(* normalized service time delay using the ratio above *)\r\nfun norm_rel_st_delay(t,d) = rel_st_delay(t,d/eff_st_factor) ;\r\n\r\n(* normalized service time delay using the ratio above *)\r\nfun norm_r_st_delay(d) = r_st_delay(d/eff_st_factor);\r\n\r\n\r\n(* FILE HANDLING *)\r\n\r\nval FILE = \"./event_log\";\r\nval EXT = [\"all\",\"orders\",\"items\",\"packages\",\"customers\",\"products\"];\r\nval SEP = \";\";\r\n\r\nfun list2string([]) = \"\"|\r\nlist2string(x::l) = x ^ (if l=[] then \"\" else SEP) ^ list2string(l);\r\n\r\nfun create_log_file(l) = \r\nlet\r\n   val file_id = TextIO.openOut(FILE^\".csv\")\r\n   val _ = TextIO.output(file_id, list2string(l)) \r\n   val _ = TextIO.output(file_id, if l = [] then \"\" else \"\\n\")\r\nin\r\n   TextIO.closeOut(file_id)\r\nend;\r\n\r\nfun create_log_file_ext(l,ext) = \r\nlet\r\n   val file_id = TextIO.openOut(FILE^\"-\" ^ ext ^ \".csv\")\r\n   val _ = TextIO.output(file_id, list2string(l)) \r\n   val _ = TextIO.output(file_id, if l = [] then \"\" else \"\\n\")\r\nin\r\n   TextIO.closeOut(file_id)\r\nend;\r\n\r\nfun create_log_files(l,[]) = () | create_log_files(l,x::y) = (create_log_file_ext(l,x); create_log_files(l,y));\r\n\r\nfun create_logs(l) = create_log_files(l,EXT);\r\n\r\nfun write_record(l) = \r\nlet\r\n   val file_id = TextIO.openAppend(FILE^\".csv\")\r\n   val _ = TextIO.output(file_id, list2string(l))\r\n   val _ = TextIO.output(file_id, \"\\n\")\r\n   \r\nin\r\n   TextIO.closeOut(file_id)\r\nend;\r\n\r\nfun write_record_ext(l,ext) = \r\nlet\r\n   val file_id = TextIO.openAppend(FILE^\"-\" ^ ext ^ \".csv\")\r\n   val _ = TextIO.output(file_id, list2string(l))\r\n   val _ = TextIO.output(file_id, \"\\n\")\r\n   \r\nin\r\n   TextIO.closeOut(file_id)\r\nend;\r\n\r\n(* EXAMPLE FORMAT *)\r\n\r\n(* val header = [\"case\",\"activity\",\"time\"];\r\n\r\nfun event(c,a) = write_record([Int.toString(c),a,t2s(Mtime())]);\r\n\r\nfun event_alt(c,a) = write_record([Int.toString(c),a,t2s_alt(Mtime())]);\r\n\r\nval header = [\"case\",\"activity\",\"time\"];\r\n\r\nfun event(c,a) = write_record([Int.toString(c),a,t2s(Mtime())]); *)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "id": "1cc79490-b77c-4d20-a24e-70db72f5c7a4"
    }
  ]
}